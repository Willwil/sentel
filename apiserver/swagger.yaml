---
swagger: "2.0"
info:
  description: "The API for the EatBacon IOT project"
  version: "1.0.1"
  title: "home-iot-api"
host: "localhost:4145"
basePath: "/iot/api/v1/console"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /tenants:
    post:
      tags:
      - "Tenant"
      operationId: "registerTenant"
      parameters:
      - in: "body"
        name: "tenant"
        required: false
        schema:
          $ref: "#/definitions/tenantAddRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/tenantResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
      - "Tenant"
      operationId: "updateTenant"
      parameters:
      - in: "body"
        name: "tenants"
        required: false
        schema:
          $ref: "#/definitions/tenantAddRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/tenantResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Tenant"
  /tenants/login:
    post:
      tags:
      - "Tenant"
      operationId: "loginTenant"
      parameters:
      - in: "body"
        name: "tenants"
        required: false
        schema:
          $ref: "#/definitions/tenantAddRequest"
      responses:
        200:
          description: "successfully login tenant"
        404:
          description: "The IoT hub instance or a device identity not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Tenant"
  /tenants/logout:
    post:
      tags:
      - "Tenant"
      operationId: "logoutTenant"
      parameters:
      - in: "body"
        name: "tenants"
        required: false
        schema:
          $ref: "#/definitions/tenantAddRequest"
      responses:
        200:
          description: "successfully registered tenant"
      x-swagger-router-controller: "Tenant"
  /tenants/{TenantId}:
    get:
      tags:
      - "Tenant"
      operationId: "getTenant"
      parameters:
      - name: "TenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - "Tenant"
      operationId: "deleteTenant"
      parameters:
      - name: "TenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Tenant"
  /products:
    post:
      tags:
      - "Product"
      operationId: "createProduct"
      parameters:
      - in: "body"
        name: "product"
        required: false
        schema:
          $ref: "#/definitions/productAddRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
      - "Product"
      operationId: "updateProduct"
      parameters:
      - in: "body"
        name: "product"
        required: false
        schema:
          $ref: "#/definitions/productUpdateRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Product"
  /products/all:
    get:
      tags:
      - "Product"
      operationId: "getProductList"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ProductResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "The IoT hub instance or a device identity not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
  /products/{productId}:
    get:
      tags:
      - "Product"
      operationId: "getProduct"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ProductResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "The IoT hub instance or a device identity not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - "Product"
      operationId: "removeProduct"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Product"
  /products/{productId}/devices:
    get:
      tags:
      - "Product"
      operationId: "getProductDevices"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ProductDevicesResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Product"
  /products/{productId}/rules:
    get:
      tags:
      - "Product"
      operationId: "getProductRules"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "The IoT hub instance or a device identity not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Product"
  /products/{productId}/devices/statics:
    get:
      tags:
      - "Product"
      operationId: "getDeviceStatics"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ProductDevicesResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Product"
  /devices:
    post:
      tags:
      - "Device"
      operationId: "createDevice"
      parameters:
      - in: "body"
        name: "device"
        required: false
        schema:
          $ref: "#/definitions/DeviceRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/DeviceResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
      - "Device"
      operationId: "updateDevice"
      parameters:
      - in: "body"
        name: "device"
        required: false
        schema:
          $ref: "#/definitions/DeviceRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Device"
  /products/{productId}/devices/{deviceId}:
    get:
      tags:
      - "Device"
      operationId: "getDevice"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - "Device"
      operationId: "deleteDevice"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Device"

  /devices/bulk:
    post:
      tags:
      - "Device"
      operationId: "bulkRegisterDevices"
      parameters:
      - in: "body"
        name: "device"
        required: false
        schema:
          $ref: "#/definitions/BulkDeviceRequest"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/DeviceResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Device"
  /products/{productId}/devices/{deviceId}/shadow:
    get:
      tags:
      - "Device"
      operationId: "getShadowDevice"
      parameters:
      - name: "productId"
        in: "path"
        required: true
        type: "string"
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/DeviceResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Device"
  /devices/shadow:
    patch:
      tags:
      - "Device"
      operationId: "updateShadowDevice"
      parameters:
      - in: "body"
        name: "deviceRequest"
        required: false
        schema:
          $ref: "#/definitions/BulkDevice"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/DeviceResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Device"
  /rules:
    post:
      tags:
      - "Rules"
      operationId: "createRule"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - "Rules"
      operationId: "removeRule"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
    patch:
      tags:
      - "Rules"
      operationId: "updateRule"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Rules"
  /rules/start:
    put:
      tags:
      - "Rules"
      operationId: "startRule"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Rules"
  /rules/stop:
    put:
      tags:
      - "Rules"
      operationId: "stopRule"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Rules"
  /rules/{ruleName}:
    get:
      tags:
      - "Rules"
      operationId: "getRule"
      parameters:
      - name: "ruleName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Rules"
  /message:
    post:
      tags:
      - "Runtime"
      operationId: "sendMessageToDevice"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Runtime"
  /message/broadcast:
    post:
      tags:
      - "Runtime"
      operationId: "broadcastProductMessage"
      parameters:
      - in: "body"
        name: "rule"
        required: false
        schema:
          $ref: "#/definitions/Rule"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Runtime"
  /service:
    get:
      tags:
      - "Runtime"
      operationId: "getServiceStatics"
      parameters: []
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/RuleResponse"
        400:
          description: "The body of the request is not valid"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "The authorization token cannot be validated"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Runtime"
definitions:
  LightingSummary:
    type: "object"
    properties:
      zones:
        type: "array"
        items:
          $ref: "#/definitions/LightingZone"
      zoneStatus:
        type: "array"
        items:
          $ref: "#/definitions/LightingZoneStatus"
    description: "ok"
    example:
      zoneStatus:
      - level: 6
        lastUpdate: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
      - level: 6
        lastUpdate: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
      zones:
      - deviceType: "dimmer"
        zone: "zone"
        name: "name"
        id: "id"
        deviceId: 0
      - deviceType: "dimmer"
        zone: "zone"
        name: "name"
        id: "id"
        deviceId: 0
  LightingZone:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      deviceId:
        type: "integer"
        format: "int32"
      deviceType:
        type: "string"
        enum:
        - "dimmer"
        - "switch"
      zone:
        type: "string"
    example:
      deviceType: "dimmer"
      zone: "zone"
      name: "name"
      id: "id"
      deviceId: 0
  LightingZoneStatus:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      lastUpdate:
        type: "string"
        format: "date-time"
      level:
        type: "integer"
        format: "int32"
    description: "the status of the lighting zone."
    example:
      level: 6
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
  TemperatureSummary:
    type: "object"
    properties:
      zones:
        type: "array"
        items:
          $ref: "#/definitions/TemperatureZone"
      zoneStatus:
        type: "array"
        items:
          $ref: "#/definitions/TemperatueZoneStatus"
    description: "ok"
    example:
      zoneStatus:
      - name: "name"
        id: "id"
        units: "fahrenheit"
        value: 5.962133916683182377482808078639209270477294921875
        timestamp: "2000-01-23T04:56:07.000+00:00"
      - name: "name"
        id: "id"
        units: "fahrenheit"
        value: 5.962133916683182377482808078639209270477294921875
        timestamp: "2000-01-23T04:56:07.000+00:00"
      zones:
      - inputPosition: 6
        outputPosition: 1
        zone: "zone"
        name: "name"
        id: 0
      - inputPosition: 6
        outputPosition: 1
        zone: "zone"
        name: "name"
        id: 0
  TemperatureZone:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int32"
        description: "the unique identifier for the zone"
      name:
        type: "string"
      inputPosition:
        type: "integer"
        format: "int32"
      outputPosition:
        type: "integer"
        format: "int32"
      zone:
        type: "string"
    description: "a single temperature zone"
    example:
      inputPosition: 6
      outputPosition: 1
      zone: "zone"
      name: "name"
      id: 0
  TemperatueZoneStatus:
    type: "object"
    required:
    - "id"
    - "timestamp"
    - "value"
    properties:
      id:
        type: "string"
        description: "the unique identifier for the zone"
      name:
        type: "string"
        description: "the name of the zone"
      value:
        type: "number"
        format: "double"
        description: "the temperature in the zone"
      units:
        type: "string"
        description: "the temperature units"
        default: "fahrenheit"
        enum:
        - "celcius"
        - "fahrenheit"
      timestamp:
        type: "string"
        format: "date-time"
        description: "the timestamp when the temperature was measured"
    description: "status of a single zone"
    example:
      name: "name"
      id: "id"
      units: "fahrenheit"
      value: 5.962133916683182377482808078639209270477294921875
      timestamp: "2000-01-23T04:56:07.000+00:00"
  ApiResponse:
    type: "object"
    properties:
      RequestId:
        type: "string"
        format: "int32"
      Message:
        type: "string"
        example: "everything is ok"
    example:
      RequestId: "RequestId"
      Message: "everything is ok"
  HeaterState:
    type: "object"
    properties:
      id:
        type: "string"
      state:
        type: "string"
    example:
      id: "id"
      state: "state"
  DeviceState:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      lastUpdate:
        type: "string"
        format: "date-time"
      level:
        type: "integer"
        format: "int32"
    example:
      level: 0
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
  ForecastResponse:
    type: "object"
    properties:
      city:
        $ref: "#/definitions/City"
      values:
        type: "array"
        items:
          $ref: "#/definitions/Forecast"
    example:
      city:
        country: "country"
        name: "name"
        lon: 1.46581298050294517310021547018550336360931396484375
        id: 0
        lat: 6.02745618307040320615897144307382404804229736328125
      values:
      - date: "2000-01-23T04:56:07.000+00:00"
        temperature:
          high: 3.61607674925191080461672754609026014804840087890625
          low: 9.301444243932575517419536481611430644989013671875
          night: 1.231513536777255612975068288506008684635162353515625
          evening: 7.3862819483858839220147274318151175975799560546875
          day: 4.1456080298839363962315474054776132106781005859375
          morning: 2.027123023002321833274663731572218239307403564453125
        weather:
          summary: "summary"
          icon: "icon"
          description: "description"
        humidity: 5
        pressure: 5.962133916683182377482808078639209270477294921875
        clouds: 7
        windSpeed: 2.3021358869347654518833223846741020679473876953125
      - date: "2000-01-23T04:56:07.000+00:00"
        temperature:
          high: 3.61607674925191080461672754609026014804840087890625
          low: 9.301444243932575517419536481611430644989013671875
          night: 1.231513536777255612975068288506008684635162353515625
          evening: 7.3862819483858839220147274318151175975799560546875
          day: 4.1456080298839363962315474054776132106781005859375
          morning: 2.027123023002321833274663731572218239307403564453125
        weather:
          summary: "summary"
          icon: "icon"
          description: "description"
        humidity: 5
        pressure: 5.962133916683182377482808078639209270477294921875
        clouds: 7
        windSpeed: 2.3021358869347654518833223846741020679473876953125
  Forecast:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
      pressure:
        type: "number"
        format: "double"
      humidity:
        type: "integer"
        format: "int32"
      windSpeed:
        type: "number"
        format: "double"
      clouds:
        type: "integer"
        format: "int32"
      temperature:
        $ref: "#/definitions/ForecastTemperature"
      weather:
        $ref: "#/definitions/WeatherForecast"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      temperature:
        high: 3.61607674925191080461672754609026014804840087890625
        low: 9.301444243932575517419536481611430644989013671875
        night: 1.231513536777255612975068288506008684635162353515625
        evening: 7.3862819483858839220147274318151175975799560546875
        day: 4.1456080298839363962315474054776132106781005859375
        morning: 2.027123023002321833274663731572218239307403564453125
      weather:
        summary: "summary"
        icon: "icon"
        description: "description"
      humidity: 5
      pressure: 5.962133916683182377482808078639209270477294921875
      clouds: 7
      windSpeed: 2.3021358869347654518833223846741020679473876953125
  City:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      lat:
        type: "number"
        format: "double"
      lon:
        type: "number"
        format: "double"
      country:
        type: "string"
    example:
      country: "country"
      name: "name"
      lon: 1.46581298050294517310021547018550336360931396484375
      id: 0
      lat: 6.02745618307040320615897144307382404804229736328125
  ForecastTemperature:
    type: "object"
    properties:
      low:
        type: "number"
        format: "double"
      high:
        type: "number"
        format: "double"
      morning:
        type: "number"
        format: "double"
      day:
        type: "number"
        format: "double"
      evening:
        type: "number"
        format: "double"
      night:
        type: "number"
        format: "double"
    example:
      high: 3.61607674925191080461672754609026014804840087890625
      low: 9.301444243932575517419536481611430644989013671875
      night: 1.231513536777255612975068288506008684635162353515625
      evening: 7.3862819483858839220147274318151175975799560546875
      day: 4.1456080298839363962315474054776132106781005859375
      morning: 2.027123023002321833274663731572218239307403564453125
  WeatherForecast:
    type: "object"
    properties:
      summary:
        type: "string"
      description:
        type: "string"
      icon:
        type: "string"
    example:
      summary: "summary"
      icon: "icon"
      description: "description"
  DeviceRegistrationInfo:
    type: "object"
    properties:
      uri:
        type: "string"
        format: "uri"
        example: "http://10.0.0.220:8080"
      id:
        type: "string"
        format: "uuid"
        example: "0729a580-2240-11e6-9eb5-0002a5d5c51b"
  tenantAddRequest:
    type: "object"
    properties:
      TenantId:
        type: "string"
      Password:
        type: "string"
  Tenant:
    type: "object"
    properties:
      TenantId:
        type: "string"
      Password:
        type: "string"
      CreatedAt:
        type: "string"
      UpdatedAt:
        type: "string"
  tenantResponse:
    type: "object"
    properties:
      requestId:
        type: "string"
        example: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      result:
        type: "object"
        properties: {}
    example:
      result: "{}"
      requestId: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
  productAddRequest:
    type: "object"
    properties:
      ProductName:
        type: "string"
      Category:
        type: "string"
      Description:
        type: "string"
  productUpdateRequest:
    type: "object"
    properties:
      ProductId:
        type: "string"
      ProductName:
        type: "string"
      Category:
        type: "string"
      Description:
        type: "string"
  Product:
    type: "object"
    properties:
      TenantId:
        type: "string"
      ProductId:
        type: "string"
      ProductName:
        type: "string"
      Description:
        type: "string"
      TimeCreated:
        type: "string"
      TimeModified:
        type: "string"
      Category:
        type: "string"
  ProductResponse:
    type: "object"
    properties:
      requestId:
        type: "string"
        example: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      result:
        type: "object"
        properties: {}
    example:
      result: "{}"
      requestId: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
  ProductDevicesResponse:
    type: "object"
    properties:
      RequestId:
        type: "string"
        example: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      Success:
        type: "string"
        example: "true"
      Result:
        type: "array"
        items:
          type: "object"
          properties: {}
    example:
      RequestId: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      Success: "true"
      Result:
      - "{}"
      - "{}"
  DeviceRequest:
    type: "object"
    properties:
      ProductId:
        type: "string"
      DeviceId:
        type: "string"
      DeviceName:
        type: "string"
    example:
      DeviceId: ""
      ProductId: "ProductId"
      DeviceName: "DeviceName"
  BulkDeviceRequest:
    type: "object"
    properties:
      ProductId:
        type: "string"
      Number:
        type: "string"
      DeviceName:
        type: "string"
    example:
      ProductId: "ProductId"
      Number: "10"
      DeviceName: "DeviceName"
  Device:
    type: "object"
    properties:
      ProductId:
        type: "string"
      DeviceId:
        type: "string"
      DeviceName:
        type: "string"
      DeviceStatus:
        type: "string"
      DeviceSecret:
        type: "string"
      TimeCreated:
        type: "string"
      TimeModified:
        type: "string"
    example:
      TimeCreated: "TimeCreated"
      TimeModified: "TimeModified"
      DeviceId: "DeviceId"
      DeviceSecret: "DeviceSecret"
      ProductId: "ProductId"
      DeviceStatus: "DeviceStatus"
      DeviceName: "DeviceName"
  BulkDevice:
    type: "object"
    properties:
      Device:
        type: "object"
        properties: {}
      Number:
        type: "string"
    example:
      Number: "Number"
      Device: "{}"
  DeviceResponse:
    type: "object"
    properties:
      requestId:
        type: "string"
        example: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      result:
        type: "object"
        properties: {}
    example:
      result: "{}"
      requestId: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
  Rule:
    type: "object"
    properties:
      ProductId:
        type: "string"
      RuleName:
        type: "string"
      DataFormat:
        type: "string"
      Description:
        type: "string"
      DataProcess:
        type: "string"
      DataTarget:
        type: "string"
      Status:
        type: "string"
      TimeCreated:
        type: "string"
      TimeModified:
        type: "string"
    example:
      Status: "Status"
      TimeCreated: "TimeCreated"
      TimeModified: "TimeModified"
      Description: "Description"
      DataTarget: "DataTarget"
      DataFormat: "DataFormat"
      DataProcess: "DataProcess"
      ProductId: "ProductId"
      RuleName: "RuleName"
  RuleResponse:
    type: "object"
    properties:
      requestId:
        type: "string"
        example: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
      result:
        type: "object"
        properties: {}
    example:
      result: "{}"
      requestId: "fd385079-1db6-420a-bf85-4c2efdc3e19b"
